version: '3.8'  # Utiliser une version plus récente de Docker Compose

services:
  backend:
    build:
      context: ./backend  # Répertoire contenant le Dockerfile pour le backend
    ports:
      - "5000:5000"
    networks:
      - app-network
    depends_on:
      - rabbitmq
      - redis
    image: backend:latest  # Tag de l'image Docker pour le backend
    volumes:
      - backend-data:/app  # Volume persistant pour les données de l'application

  consumer:
    build:
      context: ./consumer  # Répertoire contenant le Dockerfile pour le consumer
    networks:
      - app-network
    depends_on:
      - rabbitmq
      - redis
    image: consumer:latest  # Tag de l'image Docker pour le consumer
    volumes:
      - consumer-data:/app  # Volume persistant pour les données du consumer

  frontend:
    build:
      context: ./frontend  # Répertoire contenant le Dockerfile pour le frontend
    ports:
      - "80:80"
    networks:
      - app-network
    image: frontend:latest  # Tag de l'image Docker pour le frontend
    volumes:
      - frontend-data:/usr/share/nginx/html  # Volume persistant pour les fichiers frontend

  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "5672:5672"   # Port RabbitMQ
      - "15672:15672"  # Port pour l'interface de gestion RabbitMQ
    networks:
      - app-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq  # Volume persistant pour les données RabbitMQ

  redis:
    image: "redis:alpine"
    networks:
      - app-network
    volumes:
      - redis-data:/data  # Volume persistant pour les données Redis

networks:
  app-network:
    driver: bridge

volumes:
  backend-data:
  consumer-data:
  frontend-data:
  rabbitmq-data:
  redis-data:
